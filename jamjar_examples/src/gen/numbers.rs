# ! [cfg_attr (rustfmt , rustfmt_skip)] # ! [allow (dead_code)] # [derive (Debug , Clone , Copy , PartialEq , Eq , PartialOrd , Ord , Hash , serde :: Serialize , serde :: Deserialize)] pub enum Number { One , Two , Three , } impl Number { pub const ALL : & 'static [Number] = & [Number :: One , Number :: Two , Number :: Three ,] ; } impl Default for Number { fn default () -> Self { Self :: One } } impl std :: fmt :: Display for Number { fn fmt (& self , f : & mut std :: fmt :: Formatter) -> std :: fmt :: Result { write ! (f , "{:?}" , self) } } impl std :: str :: FromStr for Number { type Err = () ; fn from_str (s : & str) -> Result < Self , Self :: Err > { const STRINGS : & 'static [& 'static str] = & ["One" , "Two" , "Three" ,] ; for (index , & key) in STRINGS . iter () . enumerate () { if key == s { return Ok (Number :: ALL [index]) ; } } Err (()) } }